// Generated by gencpp from file wtr_usb2ros/Test.msg
// DO NOT EDIT!


#ifndef WTR_USB2ROS_MESSAGE_TEST_H
#define WTR_USB2ROS_MESSAGE_TEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace wtr_usb2ros
{
template <class ContainerAllocator>
struct Test_
{
  typedef Test_<ContainerAllocator> Type;

  Test_()
    : header()
    , Target(0.0)
    , poseKp(0.0)
    , poseKi(0.0)
    , poseKd(0.0)
    , speedKp(0.0)
    , speedKi(0.0)
    , speedKd(0.0)
    , parameter1(0.0)
    , parameter2(0.0)
    , parameter3(0.0)  {
    }
  Test_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Target(0.0)
    , poseKp(0.0)
    , poseKi(0.0)
    , poseKd(0.0)
    , speedKp(0.0)
    , speedKi(0.0)
    , speedKd(0.0)
    , parameter1(0.0)
    , parameter2(0.0)
    , parameter3(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _Target_type;
  _Target_type Target;

   typedef float _poseKp_type;
  _poseKp_type poseKp;

   typedef float _poseKi_type;
  _poseKi_type poseKi;

   typedef float _poseKd_type;
  _poseKd_type poseKd;

   typedef float _speedKp_type;
  _speedKp_type speedKp;

   typedef float _speedKi_type;
  _speedKi_type speedKi;

   typedef float _speedKd_type;
  _speedKd_type speedKd;

   typedef float _parameter1_type;
  _parameter1_type parameter1;

   typedef float _parameter2_type;
  _parameter2_type parameter2;

   typedef float _parameter3_type;
  _parameter3_type parameter3;





  typedef boost::shared_ptr< ::wtr_usb2ros::Test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wtr_usb2ros::Test_<ContainerAllocator> const> ConstPtr;

}; // struct Test_

typedef ::wtr_usb2ros::Test_<std::allocator<void> > Test;

typedef boost::shared_ptr< ::wtr_usb2ros::Test > TestPtr;
typedef boost::shared_ptr< ::wtr_usb2ros::Test const> TestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wtr_usb2ros::Test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wtr_usb2ros::Test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wtr_usb2ros::Test_<ContainerAllocator1> & lhs, const ::wtr_usb2ros::Test_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Target == rhs.Target &&
    lhs.poseKp == rhs.poseKp &&
    lhs.poseKi == rhs.poseKi &&
    lhs.poseKd == rhs.poseKd &&
    lhs.speedKp == rhs.speedKp &&
    lhs.speedKi == rhs.speedKi &&
    lhs.speedKd == rhs.speedKd &&
    lhs.parameter1 == rhs.parameter1 &&
    lhs.parameter2 == rhs.parameter2 &&
    lhs.parameter3 == rhs.parameter3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wtr_usb2ros::Test_<ContainerAllocator1> & lhs, const ::wtr_usb2ros::Test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wtr_usb2ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::wtr_usb2ros::Test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wtr_usb2ros::Test_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wtr_usb2ros::Test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wtr_usb2ros::Test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wtr_usb2ros::Test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wtr_usb2ros::Test_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wtr_usb2ros::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "143e124abaeaf23ad065284ea438f5d8";
  }

  static const char* value(const ::wtr_usb2ros::Test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x143e124abaeaf23aULL;
  static const uint64_t static_value2 = 0xd065284ea438f5d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::wtr_usb2ros::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wtr_usb2ros/Test";
  }

  static const char* value(const ::wtr_usb2ros::Test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wtr_usb2ros::Test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# motor header\n"
"Header header\n"
"float32 Target\n"
"# Position PID\n"
"float32 poseKp\n"
"float32 poseKi\n"
"float32 poseKd\n"
"# Speed PID\n"
"float32 speedKp\n"
"float32 speedKi\n"
"float32 speedKd\n"
"# Custom parameter\n"
"float32 parameter1\n"
"float32 parameter2\n"
"float32 parameter3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::wtr_usb2ros::Test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wtr_usb2ros::Test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Target);
      stream.next(m.poseKp);
      stream.next(m.poseKi);
      stream.next(m.poseKd);
      stream.next(m.speedKp);
      stream.next(m.speedKi);
      stream.next(m.speedKd);
      stream.next(m.parameter1);
      stream.next(m.parameter2);
      stream.next(m.parameter3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wtr_usb2ros::Test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wtr_usb2ros::Test_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Target: ";
    Printer<float>::stream(s, indent + "  ", v.Target);
    s << indent << "poseKp: ";
    Printer<float>::stream(s, indent + "  ", v.poseKp);
    s << indent << "poseKi: ";
    Printer<float>::stream(s, indent + "  ", v.poseKi);
    s << indent << "poseKd: ";
    Printer<float>::stream(s, indent + "  ", v.poseKd);
    s << indent << "speedKp: ";
    Printer<float>::stream(s, indent + "  ", v.speedKp);
    s << indent << "speedKi: ";
    Printer<float>::stream(s, indent + "  ", v.speedKi);
    s << indent << "speedKd: ";
    Printer<float>::stream(s, indent + "  ", v.speedKd);
    s << indent << "parameter1: ";
    Printer<float>::stream(s, indent + "  ", v.parameter1);
    s << indent << "parameter2: ";
    Printer<float>::stream(s, indent + "  ", v.parameter2);
    s << indent << "parameter3: ";
    Printer<float>::stream(s, indent + "  ", v.parameter3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WTR_USB2ROS_MESSAGE_TEST_H
